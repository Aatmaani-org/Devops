def COLOR_MAP = [...]
def getBuildUser(){...}

pipeline {
  agent any

  environment {
    doError = '0'
    BUILD_USER = '' 
    }
  /*
  def COLOR_MAP = [
    'SUCCESS': 'good', 
    'FAILURE': 'danger',
  ]
  
  def getBuildUser() {
      return 
      currentBuild.rawBuild.getCause(Cause.UserIdCause).getUserId()
  }
 */ 
  post {
    always {
      script {
        BUILD_USER = getBuildUser()
      }
    }
  }
  
  stages {
    stage ('Git clone') {
      steps{
        git branch: 'main', url:'https://github.com/Aatmaani-org/Production.git'
      }
    }
    stage ('Build Images') {
      steps{
        sh 'docker build -t node-app .'
     }
    }
    stage ('Push image to ECR') {
      steps{
        sh ''' docker tag node-app 883195043912.dkr.ecr.us-west-2.amazonaws.com/nodejs-repository:node-app
        aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 883195043912.dkr.ecr.us-west-2.amazonaws.com
        docker push 883195043912.dkr.ecr.us-west-2.amazonaws.com/nodejs-repository:node-app
        cd
        '''
      }
    }
    /*
    stage ('creating Dir') {
      steps{
      sh ''' mkdir jenkins
      cd jenkins
      git clone https://github.com/Aatmaani-org/Devops.git
      '''
      }
    }
    */
    stage ('Creating pod using Helm') {
      steps{
        sh ''' cd jenkins
        cd Devops/Machendra/helm/
        helm upgrade --install node-dev marvel -n dev -f values-dev.yaml
        '''
        }
      }
    stage('Slack Notification') {
      steps {
        slackSend channel: 'project-team', 
                  color: COLOR_MAP[currentBuild.currentResult],
                  message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} by ${BUILD_USER}\n More info at: ${env.BUILD_URL}"
          }
        }
      }
    }
 
